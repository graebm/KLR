/-
Copyright (c) 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Paul Govereau, Sean McLaughlin
-/
import Extract.Basic
import Extract.C
import KLR.Python
import Lean

/-
Output functions for Python
-/

namespace Extract.Python
open Lean Meta

private def PyName (name : Name) (f : String -> String := id) : String :=
  match name with
  | .str _ s => f (s.replace "'" "_")
  | _ => panic! "found invalid name"

instance : ToString Name where toString n := PyName n

private def genType : SimpleType -> String
  | .bool => "bool"
  | .nat | .int => "int"
  | .float => "float"
  | .string => "str"
  | .const name
  | .enum name => s!"\"{PyName name}\""
  | .option .string => "str"
  | .option t => s!"Optional[{genType t}]"
  | .list .string => "list[str]"
  | .list t => s!"list[{genType t}]"

private def under (s : String) : String :=
  if s == "" || s.endsWith "_" then s
  else s ++ "_"

private def genPyType (ty : LeanType) (pre : String := "") : MetaM Unit :=
  match ty with
  | .simple _ => pure ()
  | .prod name fields => do
      IO.println ""
      IO.println s!"class {under pre}{name}(NamedTuple):"
      if fields.length == 0 then
        IO.println "  pass"
      for f in fields do
        IO.println s!"  {f.name} : {genType f.type}"
  | .sum name variants => do
      if ty.isEnum then do
        IO.println ""
        IO.println s!"class {name}(Enum):"
        for v in variants do
          IO.println s!"  {(toString v.name).capitalize} = auto()"
        IO.println ""
        for v in variants do
          IO.println s!"def {name}_{v.name}(): return {name}.{(toString v.name).capitalize}"
      else do
        let mut tys := []
        for v in variants do
          genPyType v (PyName name)
          tys := (under (PyName name) ++ PyName v.name) :: tys
        let rhs := String.intercalate " | " tys
        IO.println ""
        IO.println s!"{name} = {rhs}"
        return ()

private def header :=
"# This file is automatically generated from KLR
# Manual edits will be overwritten

from typing import NamedTuple, Optional
from enum import Enum, auto"

def generatePythonAST : MetaM Unit := do
  IO.println header
  let tys <- C.pythonAST
  for t in tys do
    genPyType t
  return ()

def generateNkiAST : MetaM Unit := do
  IO.println header
  let tys <- C.nkiAST
  for t in tys do
    genPyType t
  return ()
